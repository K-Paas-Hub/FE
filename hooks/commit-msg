#!/bin/bash

# 🚀 FE 프로젝트 커밋 메시지 형식 검증

COMMIT_MSG_FILE="$1"
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# 커밋 메시지 형식 검증
# 형식: <type>: <description> #<issue_number>

# 타입 체크
TYPES=("feat" "fix" "docs" "style" "refactor" "test" "chore")
VALID_TYPE=false

for type in "${TYPES[@]}"; do
    if [[ "$COMMIT_MSG" =~ ^$type ]]; then
        VALID_TYPE=true
        break
    fi
done

if [ "$VALID_TYPE" = false ]; then
    echo -e "${RED}❌ 커밋 메시지 형식이 올바르지 않습니다.${NC}"
    echo ""
    echo -e "${YELLOW}올바른 형식: <type>: <description> #<issue_number>${NC}"
    echo ""
    echo "사용 가능한 타입:"
    echo "  feat     - 새로운 기능"
    echo "  fix      - 버그 수정"
    echo "  docs     - 문서 변경"
    echo "  style    - 코드 스타일 변경"
    echo "  refactor - 코드 리팩토링"
    echo "  test     - 테스트 추가/수정"
    echo "  chore    - 빌드/환경 설정 변경"
    echo ""
    echo -e "${YELLOW}예시: feat: 새로운 기능 추가 #123${NC}"
    exit 1
fi

# 설명 길이 체크 (최소 10자)
DESCRIPTION=$(echo "$COMMIT_MSG" | sed 's/^[^:]*: //' | sed 's/#[0-9]*$//')
if [ ${#DESCRIPTION} -lt 10 ]; then
    echo -e "${RED}❌ 커밋 설명이 너무 짧습니다. (최소 10자)${NC}"
    echo -e "${YELLOW}현재: ${#DESCRIPTION}자${NC}"
    exit 1
fi

# 이슈 번호 체크 (권장사항)
if [[ ! "$COMMIT_MSG" =~ \#[0-9]+ ]]; then
    echo -e "${YELLOW}⚠️  이슈 번호가 포함되지 않았습니다. (권장사항)${NC}"
    echo -e "${YELLOW}형식: #123${NC}"
fi

echo -e "${GREEN}✅ 커밋 메시지 형식이 올바릅니다.${NC}"

# Cursor 룰 준수 확인
echo -e "${BLUE}💡 Cursor 룰 준수 확인:${NC}"
echo "  • 코드 품질: .cursor/rules/code-quality.mdc"
echo "  • 테스트 & 문서화: .cursor/rules/testing-documentation.mdc"
echo "  • 개발 환경: .cursor/rules/development-environment.mdc"

exit 0
